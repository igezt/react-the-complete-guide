{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pierce Ng\\\\Desktop\\\\Personal Projects\\\\React - The Complete Guide\\\\forms\\\\src\\\\components\\\\SimpleInput.js\",\n  _s = $RefreshSig$();\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const {\n    value: enteredName,\n    isValid: nameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: nameReset\n  } = useInput(value => value.trim() !== '');\n  const {\n    value: enteredEmail,\n    isValid: emailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangedHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: emailReset\n  } = useInput(value => value.trim() !== '' && value.includes('@'));\n  let formIsValid = nameIsValid && emailIsValid;\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    if (!nameIsValid) {\n      return;\n    }\n    nameReset();\n    emailReset();\n  };\n  const inputCSS = nameInputHasError ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: inputCSS,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        className: \"invalid\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangedHandler,\n        value: enteredName,\n        onBlur: nameBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"email\",\n        onChange: emailChangedHandler,\n        value: enteredEmail,\n        onBlur: emailBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Names should not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 31\n      }, this), emailInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Emails should not be empty and include an @ symbol\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"fSTlAAzXTvrvuJOYs7ZJtS9PpSk=\", false, function () {\n  return [useInput, useInput];\n});\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useInput","jsxDEV","_jsxDEV","SimpleInput","props","_s","value","enteredName","isValid","nameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangedHandler","inputBlurHandler","nameBlurHandler","reset","nameReset","trim","enteredEmail","emailIsValid","emailInputHasError","emailChangedHandler","emailBlurHandler","emailReset","includes","formIsValid","formSubmissionHandler","event","preventDefault","inputCSS","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","onBlur","_c","$RefreshReg$"],"sources":["C:/Users/Pierce Ng/Desktop/Personal Projects/React - The Complete Guide/forms/src/components/SimpleInput.js"],"sourcesContent":["import useInput from \"../hooks/use-input\";\n\nconst SimpleInput = (props) => {\n\n  const { value: enteredName, isValid: nameIsValid, hasError: nameInputHasError, valueChangeHandler: nameChangedHandler, inputBlurHandler: nameBlurHandler, reset: nameReset} = useInput(value => value.trim() !== '');\n  const { value: enteredEmail, isValid: emailIsValid, hasError: emailInputHasError, valueChangeHandler: emailChangedHandler, inputBlurHandler: emailBlurHandler, reset: emailReset} = useInput(value => value.trim() !== '' && value.includes('@'));\n\n\n\n  \n  let formIsValid = nameIsValid && emailIsValid;\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    \n    if (!nameIsValid) {\n      return;\n    }\n\n    nameReset();\n    emailReset();\n  }\n\n  const inputCSS = nameInputHasError ? \"form-control invalid\" : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={inputCSS}>\n        <label htmlFor='name' className=\"invalid\">Your Name</label>\n        <input type='text' id='name' onChange={nameChangedHandler} value={enteredName} onBlur={nameBlurHandler}/>\n        <input type='text' id='email' onChange={emailChangedHandler} value={enteredEmail} onBlur={emailBlurHandler}/>\n        {nameInputHasError && <p>Names should not be empty</p>}\n        {emailInputHasError && <p>Emails should not be empty and include an @ symbol</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}